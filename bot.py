import time
# import logging
from weather import *
from keyboards import *
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime

api_token = '6175498507:AAFXPi7slq-buPQ0vjlExHBncOuLtMWwsrE'
bot = Bot(token=api_token)
dp = Dispatcher(bot=bot)
mode = "default"

def weatherMessage(weather):
	return f"{weather.place}, –ø–æ–≥–æ–¥–∞ –Ω–∞ {datetime.now().strftime('%Y-%m-%d, %H:%M')}:\n{weather.description}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temp:.1f}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather.feels_like:.1f}¬∞C\n–í–µ—Ç–µ—Ä {weather.wind_direction}, {weather.wind_speed:.1f} –º/—Å" 

@dp.message_handler(commands=['start', 'main'])
async def start_handler(message: types.Message):
	global mode
	mode = "default";
	user_id = message.from_user.id
	name = message.from_user.first_name
	await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–≥–æ–¥–µüå§\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö", reply_markup=main_keyboard)

@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
	global mode
	mode = "default"
	user_id = message.from_user.id
	await message.answer("–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n/ask_weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)

@dp.message_handler(commands=["ask_weather"])
async def ask_handler(message: types.Message):
	global mode
	mode = "request"
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", reply_markup=loc_keyboard)

@dp.message_handler(content_types=["text"])
async def getWeather(message: types.Message):
	global mode
	if mode == "request":
		try:
			weather = await getCityWeather(message.text)
		except WeatherException:
			await message.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return
		
		await message.answer(weatherMessage(weather))
	else:
		await message.reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –¥–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")


@dp.message_handler(content_types=["location"])
async def getWeather(message: types.Message):
	try:
		weather = await getLocWeather(message.location)
	except WeatherException:
		await message.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return

	await message.answer(weatherMessage(weather))

executor.start_polling(dp)